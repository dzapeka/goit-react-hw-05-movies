{"version":3,"file":"static/js/821.2f5f4cbc.chunk.js","mappings":"2QAEaA,EAAwBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kEAMlCC,EAAeH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2BAIzBG,EAAcL,EAAAA,GAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,uD,SCgBnC,EApBqB,SAAHK,GAA2C,IAArCC,EAAID,EAAJC,KAAMC,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aACvC,OACEC,EAAAA,EAAAA,MAACZ,EAAqB,CAAAa,SAAA,EACpBC,EAAAA,EAAAA,KAACV,EAAY,CACXW,IACEJ,EAAY,GAAAK,OACLC,EAAAA,GAAc,UAAAD,OAASL,GAC1BO,EAAAA,GAENC,IAAKV,EACLW,MAAM,SAERR,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACR,EAAW,CAAAO,SAAEJ,KACdK,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,SAIZ,ECPA,EAhBiB,SAAHF,GAAkB,IAAZa,EAAIb,EAAJa,KAClB,OACEP,EAAAA,EAAAA,KAAA,MAAAD,SACGQ,EAAKC,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIf,EAAIc,EAAJd,KAAMC,EAASa,EAATb,UAAWC,EAAYY,EAAZZ,aAAY,OAC5CG,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACW,EAAY,CACXhB,KAAMA,EACNC,UAAWA,EACXC,aAAcA,KAJTa,EAMJ,KAIb,E,8BCoBA,EA9BiB,WACf,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BP,EAAIS,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAkCJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAmB9B,OAjBAG,EAAAA,EAAAA,YAAU,WACR,GAAKX,EAAL,CACA,IAAMY,EAAc,eAAA9B,GAAA+B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEA,OAFAF,EAAAC,KAAA,EAEnBT,GAAa,GAAMQ,EAAAE,KAAA,GACIC,EAAAA,EAAAA,IAAarB,GAAS,KAAD,EAAAgB,EAAAE,EAAAI,KAApC3B,EAAIqB,EAAJrB,KACRW,EAAQX,GAAMuB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEdM,EAAAA,OAAAA,QAAe,6BAA6B,QAExB,OAFwBN,EAAAC,KAAA,GAE5CT,GAAa,GAAOQ,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAX,EAAA,wBAEvB,kBAVmB,OAAAjC,EAAA6C,MAAA,KAAAC,UAAA,KAYpBhB,GAboB,CActB,GAAG,CAACZ,KAGFd,EAAAA,EAAAA,MAAA2C,EAAAA,SAAA,CAAA1C,SAAA,CACGsB,IAAarB,EAAAA,EAAAA,KAAC0C,EAAAA,EAAM,IACpBnC,EAAKoC,OAAS,IAAK3C,EAAAA,EAAAA,KAAC4C,EAAQ,CAACrC,KAAMA,MAG1C,C","sources":["components/CastListItem/CastListItem.styled.js","components/CastListItem/CastListItem.jsx","components/CastList/CastList.jsx","pages/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastListItemContainer = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 24px;\n`;\n\nexport const ProfilePhoto = styled.img`\n  width: 100px;\n`;\n\nexport const ProfileName = styled.p`\n  margin-bottom: 15px;\n  font-weight: 700;\n`;\n","import { DEFAULT_IMG_PLACEHOLDER, IMAGE_BASE_URL } from 'js/themoviedb-api';\nimport React from 'react';\nimport {\n  CastListItemContainer,\n  ProfileName,\n  ProfilePhoto,\n} from './CastListItem.styled';\n\nconst CastListItem = ({ name, character, profile_path }) => {\n  return (\n    <CastListItemContainer>\n      <ProfilePhoto\n        src={\n          profile_path\n            ? `${IMAGE_BASE_URL}/w200/${profile_path}`\n            : DEFAULT_IMG_PLACEHOLDER\n        }\n        alt={name}\n        width=\"200\"\n      />\n      <div>\n        <ProfileName>{name}</ProfileName>\n        <p>{character}</p>\n      </div>\n    </CastListItemContainer>\n  );\n};\n\nexport default CastListItem;\n","import CastListItem from 'components/CastListItem/CastListItem';\nimport React from 'react';\n\nconst CastList = ({ cast }) => {\n  return (\n    <ul>\n      {cast.map(({ id, name, character, profile_path }) => (\n        <li key={id}>\n          <CastListItem\n            name={name}\n            character={character}\n            profile_path={profile_path}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default CastList;\n","import CastList from 'components/CastList/CastList';\nimport Loader from 'components/Loader/Loader';\nimport { fetchCredits } from 'js/themoviedb-api';\nimport { Notify } from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const { cast } = await fetchCredits(movieId);\n        setCast(cast);\n      } catch (error) {\n        Notify.failure('Unable to load movie cast');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast.length > 0 && <CastList cast={cast} />}\n    </>\n  );\n};\n\nexport default CastPage;\n"],"names":["CastListItemContainer","styled","_templateObject","_taggedTemplateLiteral","ProfilePhoto","_templateObject2","ProfileName","_templateObject3","_ref","name","character","profile_path","_jsxs","children","_jsx","src","concat","IMAGE_BASE_URL","DEFAULT_IMG_PLACEHOLDER","alt","width","cast","map","_ref2","id","CastListItem","movieId","useParams","_useState","useState","_useState2","_slicedToArray","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchMovieCast","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$fetchCredits","_cast","_context","prev","next","fetchCredits","sent","t0","Notify","finish","stop","apply","arguments","_Fragment","Loader","length","CastList"],"sourceRoot":""}